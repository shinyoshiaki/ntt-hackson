{"version":3,"sources":["App.tsx","webrtc/utill.ts","serviceWorker.ts","index.tsx"],"names":["peer","stream","getLocalDesktop","arguments","length","undefined","console","log","Promise","resolve","navigator","getDisplayMedia","video","then","App","_useObject","useObject","state","setState","videoRef","React","createRef","myVideoRef","_init","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","srcObject","stop","this","apply","useEffect","Peer","key","debug","init","react_default","createElement","index_es","onChange","e","room","target","value","onClick","call","joinRoom","mode","on","ref","autoPlay","style","width","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"2IAMIA,EACAC,gHC0BG,SAASC,IAA8CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAE5D,OADAG,QAAQC,IAAI,WACL,IAAIC,QAAqB,SAACC,GAC/BC,UACGC,gBAAgB,CACfC,OAAO,IAERC,KAAK,SAACZ,GACLQ,EAAQR,OD5BhB,IAiDea,EAjDgB,WAAM,IAAAC,EACPC,IAAiB,IAArCC,EAD2BF,EAC3BE,MAAOC,EADoBH,EACpBG,SACXC,EAAWC,IAAMC,YACjBC,EAAkBF,IAAMC,YAHO,SAAAE,IAAA,OAAAA,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAUnC,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACiB/B,IADjB,OACED,EADF8B,EAAAG,KAEEZ,EAAWa,UAAYlC,EAFzB,wBAAA8B,EAAAK,SAAAP,EAAAQ,UAVmCC,MAAAD,KAAAlC,WAenC,OAVAoC,oBAAU,WACRvC,EAAO,IAAIwC,IAAK,CAAEC,IAAK,uCAAwCC,MAAO,IANrC,WAAAnB,EAAAe,MAAAD,KAAAlC,WAOjCwC,IACC,IAQDC,EAAAjB,EAAAkB,cAAA,WACED,EAAAjB,EAAAkB,cAACC,EAAA,EAAD,CACEC,SAAU,SAAAC,GACR9B,EAAS,CAAE+B,KAAMD,EAAEE,OAAOC,WAG9BP,EAAAjB,EAAAkB,cAACC,EAAA,EAAD,CACEM,QAAS,WACP,GAAKnC,EAAMgC,KAAX,CACA,IAAMI,EAAOrD,EAAKsD,SAASrC,EAAMgC,KAAM,CAAEM,KAAM,MAAOtD,WACjDoD,GACLA,EAAKG,GAAG,SAAU,SAAAvD,GACfkB,EAAiBgB,UAAYlC,OANpC,QAYA2C,EAAAjB,EAAAkB,cAAA,WACED,EAAAjB,EAAAkB,cAAA,SACEY,IAAK,SAAA7C,GAAK,OAAMU,EAAqBV,GACrC8C,UAAU,EACVC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,UAEjCjB,EAAAjB,EAAAkB,cAAA,SACEY,IAAK,SAAA7C,GAAK,OAAMO,EAAmBP,GACnC8C,UAAU,EACVC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,aE5CrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOxB,EAAAjB,EAAAkB,cAACwB,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmB7D,WACrBA,UAAU8D,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC","file":"static/js/main.983bb13b.chunk.js","sourcesContent":["import React, { FunctionComponent, useEffect } from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport Peer from \"skyway-js\";\nimport { getLocalVideo } from \"webrtc4me/lib/utill\";\nimport useObject from \"useobject\";\nimport { getLocalDesktop } from \"./webrtc/utill\";\nlet peer: Peer;\nlet stream: MediaStream;\n\ninterface State {\n  room?: string;\n}\n\nconst App: FunctionComponent = () => {\n  const { state, setState } = useObject<State>({});\n  let videoRef = React.createRef();\n  let myVideoRef: any = React.createRef();\n\n  useEffect(() => {\n    peer = new Peer({ key: \"725b7ef3-cd3d-4032-b019-00fc43b6639f\", debug: 3 });\n    init();\n  }, []);\n\n  async function init() {\n    stream = await getLocalDesktop();\n    myVideoRef.srcObject = stream;\n  }\n\n  return (\n    <div>\n      <TextField\n        onChange={e => {\n          setState({ room: e.target.value });\n        }}\n      />\n      <Button\n        onClick={() => {\n          if (!state.room) return;\n          const call = peer.joinRoom(state.room, { mode: \"sfu\", stream });\n          if (!call) return;\n          call.on(\"stream\", stream => {\n            (videoRef as any).srcObject = stream;\n          });\n        }}\n      >\n        open\n      </Button>\n      <div>\n        <video\n          ref={video => ((myVideoRef as any) = video)}\n          autoPlay={true}\n          style={{ width: \"50%\", height: \"100%\" }}\n        />\n        <video\n          ref={video => ((videoRef as any) = video)}\n          autoPlay={true}\n          style={{ width: \"50%\", height: \"100%\" }}\n        />\n      </div>\n    </div>\n  );\n};\nexport default App;\n","interface option {\n  width: number;\n  height: number;\n}\n\nconst defaultOption = { width: 1280, height: 720 };\n\nexport function getLocalVideo(option: Partial<option> = {}) {\n  const opt = { ...defaultOption, ...option };\n  return new Promise<MediaStream>((resolve: (v: MediaStream) => void) => {\n    navigator.getUserMedia = navigator.getUserMedia;\n    navigator.mediaDevices\n      .getUserMedia({\n        audio: true,\n        video: { width: opt.width, height: opt.height }\n      })\n      .then(stream => {\n        resolve(stream);\n      });\n  });\n}\n\nexport function getLocalAudio() {\n  return new Promise<MediaStream>((resolve: (v: MediaStream) => void) => {\n    navigator.getUserMedia = navigator.getUserMedia;\n    navigator.mediaDevices\n      .getUserMedia({ audio: true, video: false })\n      .then(stream => {\n        resolve(stream);\n      });\n  });\n}\n\nexport function getLocalDesktop(option: Partial<option> = {}) {\n  console.log(\"display\");\n  return new Promise<MediaStream>((resolve: (v: MediaStream) => void) => {\n    navigator\n      .getDisplayMedia({\n        video: true\n      })\n      .then((stream: any) => {\n        resolve(stream);\n      });\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}