{"version":3,"sources":["webrtc/utill.ts","webrtc/signaling.ts","containers/ShareBoard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getLocalDesktop","arguments","length","undefined","console","log","Promise","resolve","navigator","getDisplayMedia","video","then","stream","socket","client","connect","create","room","emit","rtc","WebRTC","nodeId","on","data","makeAnswer","sdp","signal","addOnData","message","join","makeOffer","setAnswer","peer","ShareBoard","_ref","isTeacher","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","setPeer","useEffect","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee2","wrap","_context2","prev","next","sent","raw","label","setTimeout","_callee","_context","stop","this","apply","react_default","createElement","style","margin","marginTop","height","padding","border","width","index_es","multiline","value","onChange","e","target","send","targetDesktopRef","React","createRef","myDesktopRef","targetVideoRef","myVideoRef","App","setRoom","user","setUser","_useState5","_useState6","status","setStatus","_init","srcObject","getLocalVideo","Peer","key","debug","init","handleConnect","userType","call","joinRoom","mode","connectServer","display","onClick","paddingRight","flexDirection","ref","autoPlay","maxHeight","containers_ShareBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0056eef.chunk.js","sourcesContent":["interface option {\n  width: number;\n  height: number;\n}\n\nconst defaultOption = { width: 1280, height: 720 };\n\nexport function getLocalVideo(option: Partial<option> = {}) {\n  const opt = { ...defaultOption, ...option };\n  return new Promise<MediaStream>((resolve: (v: MediaStream) => void) => {\n    navigator.getUserMedia = navigator.getUserMedia;\n    navigator.mediaDevices\n      .getUserMedia({\n        audio: true,\n        video: { width: opt.width, height: opt.height }\n      })\n      .then(stream => {\n        resolve(stream);\n      });\n  });\n}\n\nexport function getLocalAudio() {\n  return new Promise<MediaStream>((resolve: (v: MediaStream) => void) => {\n    navigator.getUserMedia = navigator.getUserMedia;\n    navigator.mediaDevices\n      .getUserMedia({ audio: true, video: false })\n      .then(stream => {\n        resolve(stream);\n      });\n  });\n}\n\nexport function getLocalDesktop(option: Partial<option> = {}) {\n  console.log(\"display\");\n  return new Promise<MediaStream>((resolve: (v: MediaStream) => void) => {\n    navigator\n      .getDisplayMedia({\n        video: true\n      })\n      .then((stream: any) => {\n        resolve(stream);\n      });\n  });\n}\n","import client from \"socket.io-client\";\nimport WebRTC from \"webrtc4me\";\n\nconst url = \"https://aqueous-earth-75182.herokuapp.com/\";\n\nconst socket = client.connect(url);\n\nexport function create(room: string) {\n  return new Promise<WebRTC>(resolve => {\n    socket.emit(\"create\", { room });\n    const rtc = new WebRTC({ nodeId: \"answer\" });\n    socket.on(\"offer\", (data: { sdp: string }) => {\n      rtc.makeAnswer(data.sdp);\n    });\n    rtc.signal = sdp => {\n      socket.emit(\"answer\", { sdp, room });\n    };\n    rtc.connect = () => {\n      socket.emit(\"connect\", { room });\n      console.log(\"connect create\");\n      resolve(rtc);\n    };\n    rtc.addOnData(message => {\n      console.log({ message });\n    }, \"answer\");\n  });\n}\n\nexport function join(room: string) {\n  return new Promise<WebRTC>(resolve => {\n    socket.emit(\"join\", { room });\n    const rtc = new WebRTC({ nodeId: \"offer\" });\n    socket.on(\"join\", () => {\n      rtc.makeOffer();\n      rtc.signal = sdp => {\n        socket.emit(\"offer\", { sdp, room });\n      };\n      socket.on(\"answer\", (data: { sdp: string }) => {\n        rtc.setAnswer(data.sdp);\n      });\n      rtc.connect = () => {\n        console.log(\"connect join\");\n        resolve(rtc);\n      };\n      rtc.addOnData(message => {\n        console.log({ message });\n      }, \"offer\");\n    });\n  });\n}\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { create, join } from \"../webrtc/signaling\";\nimport WebRTC from \"webrtc4me\";\nimport { TextField } from \"@material-ui/core\";\n\nconst ShareBoard: FunctionComponent<{ isTeacher: boolean; room: string }> = ({\n  isTeacher,\n  room\n}) => {\n  const [text, setText] = useState(\"\");\n  const [peer, setPeer] = useState<any>(undefined);\n\n  useEffect(() => {\n    connect();\n  }, []);\n\n  const connect = async () => {\n    let peer: WebRTC;\n    if (isTeacher) {\n      peer = await create(room);\n      peer.addOnData(raw => {\n        console.log({ raw });\n        if (raw.label === \"share\") setText(raw.data);\n      });\n      setPeer(peer);\n    } else {\n      setTimeout(async () => {\n        peer = await join(room);\n        peer.addOnData(raw => {\n          console.log({ raw });\n          if (raw.label === \"share\") setText(raw.data);\n        });\n        setPeer(peer);\n      }, 3000);\n    }\n  };\n  console.log({ peer });\n  return (\n    <div\n      style={{\n        margin: 20,\n        marginTop: 0,\n        height: \"auto\",\n        padding: 20,\n        border: \"solid thin\"\n      }}\n    >\n      <p>shareboard</p>\n      {peer && (\n        <div style={{ width: \"40vw\" }}>\n          <TextField\n            multiline\n            value={text}\n            onChange={e => {\n              setText(e.target.value);\n              peer.send(e.target.value, \"share\");\n            }}\n            style={{ width: \"40vw\" }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ShareBoard;\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { TextField, Button, Divider } from \"@material-ui/core\";\nimport Peer from \"skyway-js\";\nimport { getLocalVideo } from \"webrtc4me/lib/utill\";\nimport { getLocalDesktop } from \"./webrtc/utill\";\nimport ShareBoard from \"./containers/ShareBoard\";\nlet peer: Peer;\n\nlet targetDesktopRef: any = React.createRef();\nlet myDesktopRef: any = React.createRef();\nlet targetVideoRef: any = React.createRef();\nlet myVideoRef: any = React.createRef();\n\nconst connectServer = (room: string, connect: () => void) => {\n  const call = peer.joinRoom(room, {\n    mode: \"sfu\",\n    stream: myDesktopRef.srcObject\n  });\n  if (!call) return;\n  call.on(\"stream\", stream => {\n    if (targetDesktopRef) targetDesktopRef.srcObject = stream;\n  });\n  const video = peer.joinRoom(room + \"video\", {\n    mode: \"sfu\",\n    stream: myVideoRef.srcObject\n  });\n  if (!video) return;\n  video.on(\"stream\", stream => {\n    if (targetVideoRef) targetVideoRef.srcObject = stream;\n    connect();\n  });\n};\n\nconst App: FunctionComponent = () => {\n  const [room, setRoom] = useState(\"\");\n  const [user, setUser] = useState(\"def\");\n  const [status, setStatus] = useState(\"def\");\n\n  useEffect(() => {\n    peer = new Peer({ key: \"725b7ef3-cd3d-4032-b019-00fc43b6639f\", debug: 3 });\n    init();\n  }, []);\n\n  async function init() {\n    myDesktopRef.srcObject = await getLocalDesktop();\n    myVideoRef.srcObject = await getLocalVideo();\n  }\n\n  const handleConnect = (userType: string) => {\n    setStatus(\"connecting\");\n    if (status === \"def\")\n      connectServer(room, () => {\n        setUser(userType);\n        setStatus(\"connected\");\n      });\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <TextField\n          value={room}\n          onChange={e => {\n            setRoom(e.target.value);\n          }}\n        />\n        <Button\n          onClick={() => {\n            handleConnect(\"teacher\");\n          }}\n        >\n          teacher\n        </Button>\n        <Button\n          onClick={() => {\n            handleConnect(\"student\");\n          }}\n        >\n          student\n        </Button>\n        <p style={{ paddingRight: 30 }}>{\"\"}</p>\n        <p style={{ paddingRight: 30 }}>room　:　{room}</p>\n        <p style={{ paddingRight: 30 }}>\n          status　:　{status !== \"def\" && status}\n        </p>\n        <p style={{ paddingRight: 30 }}>user　:　{user !== \"def\" && user}</p>\n      </div>\n\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ display: \"flex\" }}>\n          <video\n            ref={video => ((myVideoRef as any) = video)}\n            autoPlay={true}\n            style={{ width: \"30vw\", maxHeight: \"30vh\", paddingRight: 30 }}\n          />\n          <video\n            ref={video => ((targetVideoRef as any) = video)}\n            autoPlay={true}\n            style={{ width: \"30vw\", maxHeight: \"30vh\" }}\n          />\n        </div>\n        <br />\n        <Divider />\n        <br />\n        <div style={{ display: \"flex\" }}>\n          {user !== \"teacher\" && (\n            <video\n              ref={video => ((myDesktopRef as any) = video)}\n              autoPlay={true}\n              style={{ width: \"50vw\", maxHeight: \"55vh\" }}\n            />\n          )}\n          {user !== \"student\" && (\n            <video\n              ref={video => ((targetDesktopRef as any) = video)}\n              autoPlay={true}\n              style={{ width: \"50vw\", maxHeight: \"55vh\" }}\n            />\n          )}\n\n          {user !== \"def\" && (\n            <ShareBoard isTeacher={user === \"teacher\"} room={room} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}